{"version":3,"sources":["components/ArtCard/index.js","components/Wrapper/index.js","components/Navbar/index.js","components/Footer/index.js","pages/Home.js","App.js","serviceWorker.js","index.js"],"names":["ArtCard","props","react_default","a","createElement","className","alt","name","src","image","onClick","imgClick","Wrapper","Object","assign","Navbar","react_router_dom","to","score","topScore","Footer","shuffleArray","array","counter","length","index","Math","floor","random","temp","Home","state","result","clicked","imageGroup","Array","fill","artwork","gameOver","imageClick","id","console","log","concat","_this","includes","resetGame","pointIncrease","push","setState","currentScore","resetArtArray","points","newLayout","this","_this2","Fragment","components_Navbar","status","components_Wrapper","map","components_ArtCard","components_Footer","Component","App","react_router","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ff22c55e.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\n// function ArtCard(props) {\n//   return (\n//     <div className=\"card\" onClick={() => props.imageClick(props.id)}>\n//       <div className=\"img-container\">\n//         <img alt={props.name || ''} src={props.image || ''} />\n//       </div>\n \n//     </div>\n//   );\n// }\n\n// export default ArtCard;\n\nconst ArtCard = props => (\n  <div className=\"card\">\n    <div className=\"img-container\">\n      <img alt={props.name || ''} src={props.image || ''}   onClick={props.imgClick}/>\n    </div>\n  </div>\n);\n\nexport default ArtCard;","import React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper(props) {\n  return <main className=\"wrapper\" {...props} />;\n}\n\nexport default Wrapper;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport \"./style.css\";\nimport { tsPropertySignature } from \"@babel/types\";\n//import Home from \"../../pages/Home\";\n\n// Depending on the current path, this component sets the \"active\" class on the appropriate navigation link item\nfunction Navbar(props) {\n  return (\n   \n    <nav className=\"navbar navi sticky-top navbar-light bg-warning\">\n      <Link className=\"navbar-brand mb-0 h1 text-white brandFont\" to=\"/\">\n        Clicky Game\n      </Link>\n      <ul className=\"navbar-nav\"> \n          <li>Click an image to begin!</li>\n          <li className=\"nav-item brand2\">Score: {props.score} &nbsp; |&nbsp;  Top Score: {props.topScore}</li>\n      </ul>\n    </nav>\n  );\n}\n\nexport default Navbar;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Footer() {\n  return (\n    <footer className=\"footer text-center pt-4 pb-4\">\n      <span className=\"pt-2 pb-2\">  Art Clicky Game</span>\n    </footer>\n  );\n}\n\nexport default Footer;\n","import React, { Component } from \"react\";\nimport ArtCard from \"../components/ArtCard\";\nimport \"./style.css\";\nimport Wrapper from \"../components/Wrapper\";\nimport Navbar from \"../components/Navbar\";\nimport { directive } from \"@babel/types\";\nimport Footer from \"../components/Footer\";\nimport artwork from \"../artwork.json\";\n\nconst shuffleArray = (array) => {\n  let counter = array.length;\n\n  while (counter > 0) {\n      let index = Math.floor(Math.random() * counter);\n      counter--;\n      let temp = array[counter];\n      array[counter] = array[index];\n      array[index] = temp;\n  }\n  return array;\n};\n\n\nclass Home extends Component {\n  state = {\n    topScore: 0,\n    score: 0,\n    result: \"\",\n    clicked: [],\n    imageGroup: Array(17).fill({}),\n    artwork,\n    gameOver: false\n  };\n\n  componentDidMount() {\n    this.setState({ result: \"Click a card to get started\" });\n  }\n\n  imageClick = (id) => {\n    console.log(`Picture clicked with id is: ${id}`);\n    if (!this.state.clicked.includes(id)) {\n      this.pointIncrease();\n      this.state.clicked.push(id);\n      this.setState({\n        gameOver: false\n      });\n    } else {\n      this.resetGame();\n    }\n  };\n\n  pointIncrease = () => {\n    let score = this.state.currentScore + 2;\n    console.log(`the score is ${score}`);\n    if (score === this.state.imageGroup.length) {\n      this.setState({\n        result: \"You win! Start clicking to play again!\",\n        topScore: score,\n        currentScore: 0,\n        clicked: [],\n        artwork,\n        gameOver: false\n      });\n    } else if (score > this.state.topScore) {\n      this.setState({\n        topScore: score,\n        currentScore: score,\n        result: \"Correct! New high score!\",\n      });\n    } else {\n      this.setState({\n        currentScore: score,\n        result: \"Correct!\"\n      });\n    }\n    this.resetArtArray();\n  };\n\n  resetGame = () => {\n    this.setState({\n      points: 0,\n      currentScore: 0,\n      topScore: this.state.topScore,\n      result: \"You Lose!\",\n      clicked: [],\n      artwork,\n      gameOver: true\n    });\n    console.log('Game Over? ', this.state.gameOver);\n    this.resetArtArray();\n  }\n\n  resetArtArray = () => {\n    let newLayout = shuffleArray(artwork);\n    this.setState({ artwork: newLayout })\n  }\n\n  // keepScore = id => {\n  //   const score = this.state.score;\n  //   const topScore = this.state.topScore;\n  //   this.setState({ score, topScore });\n  // };\n\n\n  render() {\n    return (\n      <>\n        <Navbar\n          topScore={this.state.topScore}\n          score={this.state.currentScore}\n          status={this.state.result}\n        />\n        <Wrapper>\n          {/* <Hero backgroundImage=\"images/hero-bg.png\">\n            <Title>Click an image to begin the game. </Title>\n          </Hero> */}\n          {this.state.imageGroup.map((image, index) => (\n            <ArtCard\n              id={image.id}\n              //key={image.id}\n              name={image.name}\n              imgClick={this.imageClick}\n              image={`/images/art-0${index + 1}.png`}\n            />\n          ))}\n        </Wrapper>\n        <Footer />\n      </>\n    );\n  }\n}\nexport default Home;\n\n","import React, { Component } from \"react\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport Home from \"./pages/Home\";\nimport Wrapper from \"./components/Wrapper\";\nimport Navbar from \"./components/Navbar\";\nimport Footer from \"./components/Footer\";\n\n\nfunction App() {\n  return (\n    <Router>\n      <>\n        <Wrapper>\n          <Route exact path=\"/\" component={ Home } />\n        </Wrapper>\n      </>\n    </Router>\n  );\n}\n\nexport default App;\n\n\n\n// import React from \"react\";\n// import { BrowserRouter as Router, Route } from \"react-router-dom\";\n// import Home from \"./pages/Home\";\n// import Navbar from \"./components/Navbar\";\n// import Footer from \"./components/Footer\";\n// import Wrapper from \"./components/Wrapper\";\n\n// function App() {\n//   return (\n//     <Router>\n//       <div>\n//         <Navbar />\n//         <Wrapper>\n//           <Route exact path=\"/\" component={Home} />\n//         </Wrapper>\n//         <Footer />\n//       </div>\n//     </Router>\n//   );\n// }\n\n// export default App;\n\n// import React from 'react';\n// import logo from './logo.svg';\n// import './App.css';\n\n// function App() {\n//   return (\n//     <div className=\"App\">\n//       <header className=\"App-header\">\n//         <img src={logo} className=\"App-logo\" alt=\"logo\" />\n//         <p>\n//           Edit <code>src/App.js</code> and save to reload.\n//         </p>\n//         <a\n//           className=\"App-link\"\n//           href=\"https://reactjs.org\"\n//           target=\"_blank\"\n//           rel=\"noopener noreferrer\"\n//         >\n//           Learn React\n//         </a>\n//       </header>\n//     </div>\n//   );\n// }\n\n// export default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}